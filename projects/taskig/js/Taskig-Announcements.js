smalltalk.addPackage('Taskig-Announcements', {});
smalltalk.addClass('TaskAnnouncement', smalltalk.Object, ['task'], 'Taskig-Announcements');
smalltalk.TaskAnnouncement.comment="Base announcement for this package."
smalltalk.addMethod(
"_initializeWith_",
smalltalk.method({
selector: "initializeWith:",
category: 'initialize-release',
fn: function (aTask){
var self=this;
(self['@task']=aTask);
return self;},
args: ["aTask"],
source: unescape("initializeWith%3A%20aTask%0D%0D%09task%20%3A%3D%20aTask"),
messageSends: [],
referencedClasses: []
}),
smalltalk.TaskAnnouncement);

smalltalk.addMethod(
"_task",
smalltalk.method({
selector: "task",
category: 'accessing',
fn: function (){
var self=this;
return self['@task'];
return self;},
args: [],
source: unescape("task%0D%09%5Etask"),
messageSends: [],
referencedClasses: []
}),
smalltalk.TaskAnnouncement);


smalltalk.addMethod(
"_newWith_",
smalltalk.method({
selector: "newWith:",
category: 'instance creation',
fn: function (aTask){
var self=this;
return smalltalk.send(smalltalk.send(self, "_new", []), "_initializeWith_", [aTask]);
return self;},
args: ["aTask"],
source: unescape("newWith%3A%20aTask%0D%0D%09%5E%20self%20new%20initializeWith%3A%20aTask"),
messageSends: ["initializeWith:", "new"],
referencedClasses: []
}),
smalltalk.TaskAnnouncement.klass);


smalltalk.addClass('DeletingTask', smalltalk.TaskAnnouncement, ['widget'], 'Taskig-Announcements');
smalltalk.DeletingTask.comment=unescape("This%20announcement%20is%20generated%20by%20the%20task%20viewer%20widget%2C%20when%20the%20user%20request%20the%20task%20to%20be%20deleted.")
smalltalk.addMethod(
"_widget",
smalltalk.method({
selector: "widget",
category: 'accessing',
fn: function (){
var self=this;
return self['@widget'];
return self;},
args: [],
source: unescape("widget%0D%09%5Ewidget"),
messageSends: [],
referencedClasses: []
}),
smalltalk.DeletingTask);

smalltalk.addMethod(
"_widget_",
smalltalk.method({
selector: "widget:",
category: 'accessing',
fn: function (aWidget){
var self=this;
(self['@widget']=aWidget);
return self;},
args: ["aWidget"],
source: unescape("widget%3A%20aWidget%0D%09widget%20%3A%3D%20aWidget."),
messageSends: [],
referencedClasses: []
}),
smalltalk.DeletingTask);



smalltalk.addClass('EditingCanceled', smalltalk.TaskAnnouncement, [], 'Taskig-Announcements');
smalltalk.EditingCanceled.comment=unescape("This%20announcement%20is%20generated%20by%20the%20task%20editor%20widget%2C%20when%20the%20user%20has%20canceled%20the%20edition%20of%20the%20task.")


smalltalk.addClass('EditingDone', smalltalk.TaskAnnouncement, [], 'Taskig-Announcements');
smalltalk.EditingDone.comment=unescape("This%20announcement%20is%20generated%20by%20the%20task%20editor%20widget%2C%20when%20the%20user%20has%20finnished%20editing%20the%20task.")


smalltalk.addClass('EditingTask', smalltalk.TaskAnnouncement, [], 'Taskig-Announcements');
smalltalk.EditingTask.comment=unescape("This%20announcement%20is%20generated%20by%20the%20task%20viewer%20widget%2C%20when%20the%20user%20wants%20to%20edit%20the%20task.")


smalltalk.addClass('NewTaskAdded', smalltalk.TaskAnnouncement, [], 'Taskig-Announcements');
smalltalk.NewTaskAdded.comment="This announcement is generated by the model when a new task is added."


smalltalk.addClass('TaskRemoved', smalltalk.TaskAnnouncement, [], 'Taskig-Announcements');
smalltalk.TaskRemoved.comment="This announcement is generated by the model when a new task is removed."


